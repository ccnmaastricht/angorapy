FROM nvidia/cuda:11.0.3-base-ubuntu20.04 as base
ENV DEBIAN_FRONTEND=noninteractive
ENV LANG C.UTF-8

COPY docker/setup.sources.sh /setup.sources.sh
COPY docker/setup.packages.sh /setup.packages.sh
COPY docker/gpu.packages.cuda110.txt /gpu.packages.cuda110.txt
COPY docker/speed_workaround.sh /speed_workaround.sh

RUN /setup.sources.sh
RUN /setup.packages.sh /gpu.packages.cuda110.txt

RUN sed -i '/developer\.download\.nvidia\.com\/compute\/cuda\/repos/d' /etc/apt/sources.list.d/*
RUN sed -i '/developer\.download\.nvidia\.com\/compute\/machine-learning\/repos/d' /etc/apt/sources.list.d/*
RUN apt-key del 7fa2af80
COPY docker/cuda-keyring_1.0-1_all.deb cuda-keyring_1.0-1_all.deb
RUN dpkg -i cuda-keyring_1.0-1_all.deb

ARG PYTHON_VERSION=python3.8
COPY docker/setup.python.sh /setup.python.sh
COPY docker/gpu.requirements.txt /gpu.requirements.txt
RUN /setup.python.sh $PYTHON_VERSION /gpu.requirements.txt
RUN apt-get install --reinstall python3-apt -y
COPY docker/setup.cuda.sh /setup.cuda.sh
RUN /setup.cuda.sh

COPY docker/bashrc /etc/bash.bashrc
RUN chmod a+rwx /etc/bash.bashrc

# install packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    curl \
    git \
    swig \
    wget \
    virtualenv \
    libgl1-mesa-dev \
    libgl1-mesa-glx \
    libglew-dev \
    libc6-dev \
    libosmesa6-dev \
    patchelf \
    software-properties-common \
    gfortran \
    && apt-get install --no-install-recommends -y file g++ gcc make gdb strace ca-certificates \
    && add-apt-repository -y ppa:deadsnakes/ppa \
    && apt-get update \
    && apt-get clean
#    && rm -rf /var/lib/apt/lists/*

RUN apt-get install -y libopenexr-dev
RUN apt-get install -y openexr
RUN apt-get install -y zlib1g-dev

# INSTALL MPI
RUN wget -q http://www.mpich.org/static/downloads/3.1.4/mpich-3.1.4.tar.gz
RUN tar xf mpich-3.1.4.tar.gz
WORKDIR mpich-3.1.4
RUN ./configure --disable-fortran --enable-fast=all,O3 --prefix=/usr
RUN make -j$(nproc)
RUN make install
RUN ldconfig
WORKDIR /

RUN pip install pip --upgrade
RUN pip install --upgrade setuptools

# INSTALL TOOL
RUN mkdir /ang_tmp
COPY . /ang_tmp

RUN pip install /ang_tmp --default-timeout=100 \
    && rm -rf /ang_tmp

RUN sh speed_workaround.sh

# matplotlib
ENV MPLCONFIGDIR=/var/cache/matplotlib

WORKDIR /

COPY angorapy/train.py train.py
COPY angorapy/pretrain.py pretrain.py
COPY angorapy/analysis/predictability.py predictability.py

# FINAL
CMD [ "/bin/bash" ]
